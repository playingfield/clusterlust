---
- name: Stop firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: stopped
    enabled: false

- name: "Empower {{ cluster_admin }}"
  ansible.builtin.template:
    src: sudo.j2
    dest: /etc/sudoers.d/ansible
    owner: root
    group: root
    mode: '0444'
    validate: /usr/sbin/visudo -cf %s

- name: Disable requiretty
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: 'Defaults.*requiretty'
    line: 'Defaults !requiretty'
    state: present
    owner: root
    group: root
    mode: '0440'
    validate: /usr/sbin/visudo -cf %s

- name: Instakk libsemanage
  ansible.builtin.dnf:
    name: python3-libsemanage
    state: present

- name: Setup SELinux permissions
  ansible.posix.seboolean:
    name: "{{ item }}"
    state: true
    persistent: true
  loop:
    - rsync_full_access

- name: Get stat information about /etc/localtime
  ansible.builtin.stat:
    path: /etc/localtime
  register: localtime_stat

- name: Fix Timezone
  when:
    - localtime_stat.stat.islnk is defined and localtime_stat.stat.islnk
    - localtime_stat.stat.lnk_target == '/usr/share/zoneinfo/UTC'
  block:
    - name: Gather selinux facts
      ansible.builtin.setup:
        gather_subset: selinux

    - name: Put SELinux in permissive mode, logging actions that would be blocked.
      when: ansible_facts.selinux.status == 'enabled'
      ansible.posix.selinux:
        policy: targeted
        state: permissive

    - name: Set ntp_timezone
      community.general.timezone:
        name: "{{ ntp_timezone | d('Europe/Amsterdam') }}"

    - name: Re-enable SELinux
      when: ansible_facts.selinux.status == 'enabled'
      ansible.posix.selinux:
        policy: targeted
        state: enforcing

- name: Environment var HTTPS_PROXY
  when: https_proxy is defined
  ansible.builtin.lineinfile:
    path: /etc/environment
    create: true
    mode: '0644'
    regexp: '^HTTPS_PROXY='
    line: 'HTTPS_PROXY={{ https_proxy }}'
    state: present

- name: Update linux
  when:
    - update_linux | bool
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version|int == 8
  block:

    - name: Fix dnf proxy
      when: http_proxy is defined
      ansible.builtin.lineinfile:
        path: /etc/dnf/dnf.conf
        regexp: '^proxy='
        line: "proxy={{ http_proxy }}"
        state: present

    - name: Fix dnf
      ansible.builtin.lineinfile:
        path: /etc/dnf/dnf.conf
        regexp: '^repo_gpgcheck='
        line: 'repo_gpgcheck=0'
        state: present

    - name: Check Azure repo file
      ansible.builtin.stat:
        path: /etc/yum.repos.d/prod.repo
      register: azure_repo

    - name: Disable Azure repo
      when: azure_repo.stat.exists | bool
      ansible.builtin.yum_repository:
        baseurl: 'https://packages.microsoft.com/alma/8/prod/'
        file: prod
        name: packages-microsoft-com-prod
        description: Microsoft Production
        enabled: false

    - name: Ensure yum-utils is present
      ansible.builtin.dnf:
        name: yum-utils
        state: present

    - name: Enable kernel update
      ansible.builtin.lineinfile:
        path: /etc/yum.repos.d/almalinux.repo
        regexp: '^exclude'
        line: '#exclude=kernel* kmod-kvdo'
        mode: '0600'

    - name: Update packages and kernel
      ansible.builtin.dnf:  # noqa: package-latest
        name: "*"
        state: latest
        update_cache: true

    - name: Reboot if needed
      ansible.builtin.include_tasks: reboot_if_needed.yml

    - name: Disable kernel update
      ansible.builtin.lineinfile:
        path: /etc/yum.repos.d/almalinux.repo
        regexp: '^#exclude'
        line: 'exclude=kernel* kmod-kvdo'
        mode: '0600'
